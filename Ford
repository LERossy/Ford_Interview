/**
 * Implement a LeastRecentlyUsed Cache (LRU Cache)
 *
 * An LRU cache is a cache with a policy to discard the least recently used
 * resource first, when the cache's internal capacity limit is reached.
 *
 * Any operation on a resource (i.e. inserting, modifying, or getting) counts
 * as a 'use'.  
 */
  
#include <iostream>
#include <string>
#include <cassert>
  
class LRU {
    private:
        int capacity;
        
  public:
    LRU(int capacity) {
        
    }
    
    int get(const std::string& key) {
      return -1;
    }
 
    // Insert or update the `value` associated with `key`
    void put(const std::string& key, int value) {
  
    }
};
  
int main() {
    
  std::cout << "Hello World" << std::endl;
  LRU lru(3);
    
  lru.put("one", 1); // [1]
  lru.put("two", 2); // [2, 1]
  lru.put("three", 3); // [3, 2, 1]
  std::cout << "one: " << lru.get("one") << std::endl; // [1, 3, 2] 
  lru.put("four", 4); // [4, 1, 3]
  lru.put("five", 5); // [5, 4 ,1]
  std::cout << "two: " << lru.get("two") << std::endl;
  std::cout << "four: " << lru.get("four") << std::endl; // [4, 5, 1]
  
  std::cout << "done";
  return 0;
} 